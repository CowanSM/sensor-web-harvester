diff --git a/pom.xml b/pom.xml
index bb9d8cb..f85c345 100644
--- a/pom.xml
+++ b/pom.xml
@@ -2,7 +2,7 @@
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.axiomalaska</groupId>
   <artifactId>sensor-web-harvester</artifactId>
-  <version>0.1.6-ASA-SNAPSHOT</version>
+  <version>0.1.7-ASA-SNAPSHOT</version>
   <name>${project.artifactId}</name>
   <inceptionYear>2012</inceptionYear>
 
diff --git a/src/main/scala/com/axiomalaska/sos/source/MetadataDatabaseManager.scala b/src/main/scala/com/axiomalaska/sos/source/MetadataDatabaseManager.scala
index fb3a26f..05e4a6b 100644
--- a/src/main/scala/com/axiomalaska/sos/source/MetadataDatabaseManager.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/MetadataDatabaseManager.scala
@@ -16,10 +16,11 @@ class MetadataDatabaseManager(
 	private val logger: Logger = Logger.getRootLogger()) {
 
   def update() {
+    logger.info("In update of observation retriever")
     val factory = new ObservationUpdaterFactory()
     val queryBuilder = new StationQueryBuilder(
       databaseUrl, databaseUser, databasePassword)
-
+    logger.info("Running update on individ updaters")
     queryBuilder.withStationQuery(stationQuery => {
       val stationUpdater = new AggregateStationUpdater(stationQuery, boundingBox, sources, logger)
       stationUpdater.update()
diff --git a/src/main/scala/com/axiomalaska/sos/source/observationretriever/NoaaNosCoOpsObservationRetriever.scala b/src/main/scala/com/axiomalaska/sos/source/observationretriever/NoaaNosCoOpsObservationRetriever.scala
index 9001fef..39b2a18 100644
--- a/src/main/scala/com/axiomalaska/sos/source/observationretriever/NoaaNosCoOpsObservationRetriever.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/observationretriever/NoaaNosCoOpsObservationRetriever.scala
@@ -82,75 +82,89 @@ class NoaaNosCoOpsObservationRetriever(private val stationQuery:StationQuery,
   
   private def getSensorForeignId(phenomenon: Phenomenon):String = {
     val localPhenomenon = phenomenon.asInstanceOf[LocalPhenomenon]
-    
-    localPhenomenon.databasePhenomenon.id match{
-      case SensorPhenomenonIds.BAROMETRIC_PRESSURE =>{
-        "air_pressure"
-      }
-      case SensorPhenomenonIds.AIR_TEMPERATURE =>{
-        "air_temperature"
-      }
-      case SensorPhenomenonIds.SEA_WATER_TEMPERATURE =>{
-        "sea_water_temperature"
-      }
-      case SensorPhenomenonIds.CURRENT_DIRECTION =>{
-        "currents"
-      }
-      case SensorPhenomenonIds.CURRENT_SPEED =>{
-        "currents"
-      }
-      case SensorPhenomenonIds.WATER_LEVEL_PREDICTIONS =>{
-        "sea_surface_height_amplitude_due_to_equilibrium_ocean_tide"
-      }
-      case SensorPhenomenonIds.WATER_LEVEL =>{
-        "water_surface_height_above_reference_datum"
-      }
-      case SensorPhenomenonIds.WIND_DIRECTION =>{
-        "winds"
-      }
-      case SensorPhenomenonIds.WIND_GUST =>{
-        "winds"
-      }
-      case SensorPhenomenonIds.WIND_SPEED =>{
-        "winds"
-      }
-      case SensorPhenomenonIds.WIND_GUST_DIRECTION =>{
-        "winds"
-      }
-      case SensorPhenomenonIds.WIND_WAVE_DIRECTION =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.WIND_WAVE_PERIOD =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.WIND_WAVE_HEIGHT =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.SWELL_PERIOD =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.SWELL_HEIGHT =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.SWELL_WAVE_DIRECTION =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.DOMINANT_WAVE_DIRECTION =>{
-        "waves"
-      }
-      case SensorPhenomenonIds.DOMINANT_WAVE_PERIOD =>{
-        "waves"
+    logger.info(localPhenomenon.getName)
+    localPhenomenon.getName match {
+      case "water_level" => {
+          "water_surface_height_above_reference_datum"
       }
-      case SensorPhenomenonIds.SIGNIFICANT_WAVE_HEIGHT =>{
-        "waves"
+      case "Air Pressure" => {
+          "air_pressure"
       }
-      case SensorPhenomenonIds.AVERAGE_WAVE_PERIOD =>{
-        "waves"
+      case "Air Temperature" => {
+          "air_temperature"
       }
-      case SensorPhenomenonIds.SALINITY =>{
-        "Salinity"
+      case _ => {
+          localPhenomenon.getName
       }
     }
+//    localPhenomenon.databasePhenomenon.id match{
+//      case SensorPhenomenonIds.BAROMETRIC_PRESSURE =>{
+//        "air_pressure"
+//      }
+//      case SensorPhenomenonIds.AIR_TEMPERATURE =>{
+//        "air_temperature"
+//      }
+//      case SensorPhenomenonIds.SEA_WATER_TEMPERATURE =>{
+//        "sea_water_temperature"
+//      }
+//      case SensorPhenomenonIds.CURRENT_DIRECTION =>{
+//        "currents"
+//      }
+//      case SensorPhenomenonIds.CURRENT_SPEED =>{
+//        "currents"
+//      }
+//      case SensorPhenomenonIds.WATER_LEVEL_PREDICTIONS =>{
+//        "sea_surface_height_amplitude_due_to_equilibrium_ocean_tide"
+//      }
+//      case SensorPhenomenonIds.WATER_LEVEL =>{
+//        "water_surface_height_above_reference_datum"
+//      }
+//      case SensorPhenomenonIds.WIND_DIRECTION =>{
+//        "winds"
+//      }
+//      case SensorPhenomenonIds.WIND_GUST =>{
+//        "winds"
+//      }
+//      case SensorPhenomenonIds.WIND_SPEED =>{
+//        "winds"
+//      }
+//      case SensorPhenomenonIds.WIND_GUST_DIRECTION =>{
+//        "winds"
+//      }
+//      case SensorPhenomenonIds.WIND_WAVE_DIRECTION =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.WIND_WAVE_PERIOD =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.WIND_WAVE_HEIGHT =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.SWELL_PERIOD =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.SWELL_HEIGHT =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.SWELL_WAVE_DIRECTION =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.DOMINANT_WAVE_DIRECTION =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.DOMINANT_WAVE_PERIOD =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.SIGNIFICANT_WAVE_HEIGHT =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.AVERAGE_WAVE_PERIOD =>{
+//        "waves"
+//      }
+//      case SensorPhenomenonIds.SALINITY =>{
+//        "Salinity"
+//      }
+//    }
   }
   
   private def buildSensorObservationValues(
diff --git a/src/main/scala/com/axiomalaska/sos/source/observationretriever/StoretObservationRetriever.scala b/src/main/scala/com/axiomalaska/sos/source/observationretriever/StoretObservationRetriever.scala
index 42a6970..715dc1e 100644
--- a/src/main/scala/com/axiomalaska/sos/source/observationretriever/StoretObservationRetriever.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/observationretriever/StoretObservationRetriever.scala
@@ -77,14 +77,12 @@ class StoretObservationRetriever(private val stationQuery:StationQuery,
      // get list of observed values matching the phenomenon name, then iterate and add the values and dates for the observation (phenomenon)
       for (observationValue <- observationValuesCollection) {
         try {
-          logger.info("looking for obsValue: " + phenomenon.databasePhenomenon.name)
           val observationList = stationItems.flatMap(itm => matchObsTags(phenomenon.databasePhenomenon.name, itm.obsList))
-          logger.info("Have " + observationList.size + " observations for phenomenon")
           for (obs <- observationList; if !observationValue.containsDate(obs._1)) {
             observationValue.addValue(obs._2, obs._1)
           }
         } catch {
-          case ex: Exception => { logger.info(ex.toString + "\n\t" + ex.getStackTraceString) }
+          case ex: Exception => { logger.error(ex.toString + "\n\t" + ex.getStackTraceString) }
         }
       }
       
@@ -118,17 +116,11 @@ class StoretObservationRetriever(private val stationQuery:StationQuery,
       }
       
       if (secondaryTagToSearch != "nothing") {
-        observations.filter(p => p._1.toLowerCase.contains(primaryTagToSearch) && p._1.toLowerCase.contains(secondaryTagToSearch)).map(p => logger.info(p._1))
         retval = observations.filter(p => p._1.toLowerCase.contains(primaryTagToSearch) && p._1.toLowerCase.contains(secondaryTagToSearch)).flatMap(p => p._2)
       } else {
         retval = observations.filter(p => p._1.toLowerCase.contains(primaryTagToSearch)).flatMap(p => p._2)
       }
       
-      if (retval.size > 0) {
-        logger.info("returning obsrevations for " + lphenomName + ": ")
-        retval.map(p => logger.info(p._1.getTime.toString + " - " + p._2.toString))
-      }
-      
       return retval
     }
     
diff --git a/src/main/scala/com/axiomalaska/sos/source/stationupdater/AggregateStationUpdater.scala b/src/main/scala/com/axiomalaska/sos/source/stationupdater/AggregateStationUpdater.scala
index 8fe8aa6..be4c673 100644
--- a/src/main/scala/com/axiomalaska/sos/source/stationupdater/AggregateStationUpdater.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/stationupdater/AggregateStationUpdater.scala
@@ -35,33 +35,43 @@ class AggregateStationUpdater(private val stationQuery: StationQuery,
   private def getStationUpdaters():List[StationUpdater] = {
     var retval: List[StationUpdater] = List()
     if (sources.contains("all") || sources.contains("glos")) {
+      logger.info("adding GLOS updater")
       retval = new GlosStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("storet")) {
+      logger.info("adding STORET updater")
       retval = new StoretStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("hads")) {
+      logger.info("adding HADS updater")
       retval = new HadsStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("ndbc")) {
+      logger.info("adding NDBC updater")
       retval = new NdbcStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("noaanoscoops")) {
+      logger.info("adding NOAA-NOSCOOPS updater")
       retval = new NoaaNosCoOpsStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("noaaweather")) {
+      logger.info("adding NOAA-WEATHER updater")
       retval = new NoaaWeatherStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("raws")) {
+      logger.info("adding RAWS updater")
       retval = new RawsStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("snotel")) {
+      logger.info("adding SNOTEL updater")
       retval = new SnoTelStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("nerrs")) {
+      logger.info("adding NERRS updater")
       retval = new NerrsStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     if (sources.contains("all") || sources.contains("usgswater")) {
+      logger.info("adding USGS-WATER updater")
       retval = new UsgsWaterStationUpdater(stationQuery, boundingBox, logger) :: retval
     }
     return retval
diff --git a/src/main/scala/com/axiomalaska/sos/source/stationupdater/NoaaNosCoOpsStationUpdater.scala b/src/main/scala/com/axiomalaska/sos/source/stationupdater/NoaaNosCoOpsStationUpdater.scala
index 10c1e19..3d1a767 100644
--- a/src/main/scala/com/axiomalaska/sos/source/stationupdater/NoaaNosCoOpsStationUpdater.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/stationupdater/NoaaNosCoOpsStationUpdater.scala
@@ -53,10 +53,11 @@ class NoaaNosCoOpsStationUpdater(private val stationQuery: StationQuery,
   // ---------------------------------------------------------------------------
   
   def update() {
+    logger.info("Getting source stations")
     val sourceStationSensors = getSourceStations(source)
-
+    logger.info("Getting db stations")
     val databaseStations = stationQuery.getAllStations(source)
-
+    logger.info("Updating db with new stations")
     stationUpdater.updateStations(sourceStationSensors, databaseStations)
   }
   
diff --git a/src/main/scala/com/axiomalaska/sos/source/stationupdater/StoretStationUpdater.scala b/src/main/scala/com/axiomalaska/sos/source/stationupdater/StoretStationUpdater.scala
index 20866b6..0bcaed4 100644
--- a/src/main/scala/com/axiomalaska/sos/source/stationupdater/StoretStationUpdater.scala
+++ b/src/main/scala/com/axiomalaska/sos/source/stationupdater/StoretStationUpdater.scala
@@ -173,41 +173,31 @@ class StoretStationUpdater (private val stationQuery: StationQuery,
   private def matchPhenomenaToName(name: String, units: String) : Phenomenon = {
     val lname = name.toLowerCase
     logger.info("Looking for phenom " + name + " " + units)
-    if (lname contains "ammonium") {
+    if (lname equals "ammonium") {
       Phenomena.instance.AMMONIUM
-    } else if (lname.contains("chlorophyll")) {
-        if (lname.contains("fluorescence")) {
-          Phenomena.instance.CHLOROPHYLL_FLOURESCENCE
-        } else {
+    } else if (lname equals "chlorophyll") {
           Phenomena.instance.CHLOROPHYLL
-        }
-    } else if (lname contains "nitrite") {
-      if (lname.contains("+")) {
+    } else if (lname equals "chlorophyll_flourescence") {
+          Phenomena.instance.CHLOROPHYLL_FLOURESCENCE
+    } else if (lname equals "nitrite+nitrate") {
         Phenomena.instance.NITRITE_PLUS_NITRATE
-      } else {
-        // else it is prob just nitrite
+    } else if (lname equals "nitrite") {
         Phenomena.instance.NITRITE
-      }
-    } else if (lname contains "nitrate") {
+    } else if (lname equals "nitrate") {
       Phenomena.instance.NITRATE
-    } else if (lname contains "water") {
-      if (lname contains "temperature") {
+    } else if (lname equals "temperature, water") {
         Phenomena.instance.SEA_WATER_TEMPERATURE
-      } else {
-        // prob water speed
+    } else if (lname equals "speed, water") {     // not sure if this is actually a variable name in storet
         Phenomena.instance.SEA_WATER_SPEED
-      }
-    } else if (lname contains "wind") {
-      if (lname contains "direction") {
+    } else if (lname equals "wind, direction") {  // not sure if this is actually a variable name in storet
         Phenomena.instance.WIND_FROM_DIRECTION
-      } else {
+    } else if (lname equals "wind, gust") {       // not sure if this is actually a variable name in storet
         Phenomena.instance.WIND_SPEED_OF_GUST
-      }
-    } else if (lname contains "dew") {
+    } else if (lname equals "dew") {
       Phenomena.instance.DEW_POINT_TEMPERATURE
-    } else if (lname contains "ph") {
+    } else if (lname equals "ph") {
       Phenomena.instance.SEA_WATER_PH_REPORTED_ON_TOTAL_SCALE
-    } else if (lname contains "alkalinity") {
+    } else if (lname equals "alkalinity, total (total hydroxide+carbonate+bicarbonate)") {
       Phenomena.instance.ALKALINITY
     } else if (units contains "#/100ml") {
       Phenomena.instance.createPhenomenonWithPPmL(lname)
